<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | NuoErlz Blog]]></title>
  <link href="http://nuoerlz.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://nuoerlz.github.com/"/>
  <updated>2013-01-19T15:22:51+08:00</updated>
  <id>http://nuoerlz.github.com/</id>
  <author>
    <name><![CDATA[nuoerlz]]></name>
    <email><![CDATA[nuoerlz@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS中在程序中调用打开第三方程序]]></title>
    <link href="http://nuoerlz.github.com/blog/2013/01/17/start-App-out-of-another-App/"/>
    <updated>2013-01-17T17:24:00+08:00</updated>
    <id>http://nuoerlz.github.com/blog/2013/01/17/start-App-out-of-another-App</id>
    <content type="html"><![CDATA[<h2>在某一程序里调用打开其它程序</h2>

<p>原则上iOS的沙箱原理, 是阻止一个app去访问其他app的资源乃至是系统底层的资源的.
但是我们可以通过一种变相的方式: 通过对应的URL模式和其他程序进行通讯. 为了实现
这种程序间的通信, 需要对 被调用程序(A) 作一些修改.</p>

<!--more-->


<h3>配置被调用程序(A)</h3>

<p>为了使自己可以被其它程序能够调用打开, 要作的配置:</p>

<h4>注册定制的URL模式</h4>

<p>在为您的应用程序注册URL类型时, 必须指定CFBundleURLTypes属性的子属性:</p>

<ul>
<li><p>CFBundleURLName 这是个字符串, 表示URL类型的抽象名. 为了确保其唯一性, 建议您
使用反向DNS风格的标识, 比如 com.yixia.VPlayer</p></li>
<li><p>CFBundleURLSchemes 这是个URL模式的数组, 表示归属于这个URL类型的URL. 每个模式
都是一个字符串. 如 VPlayer</p></li>
</ul>


<p>修改 Info.plist ,</p>

<p>```diff</p>

<pre><code>$ git diff VPlayer-Info.plist
    diff --git a/VPlayer-Info.plist b/VPlayer-Info.plist
    index faba046..b60a0b9 100644
    --- a/VPlayer-Info.plist
    +++ b/VPlayer-Info.plist
    @@ -2,6 +2,21 @@
     &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
     &lt;plist version="1.0"&gt;
     &lt;dict&gt;
    +    &lt;key&gt;CFBundleGetInfoString&lt;/key&gt;
    +    &lt;string&gt;&lt;/string&gt;
    +    &lt;key&gt;CFBundleURLTypes&lt;/key&gt;
    +    &lt;array&gt;
    +        &lt;dict&gt;
    +            &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
    +            &lt;array&gt;
    +                &lt;string&gt;VPlayer&lt;/string&gt;
    +            &lt;/array&gt;
    +        &lt;/dict&gt;
    +        &lt;dict&gt;
    +            &lt;key&gt;CFBundleURLName&lt;/key&gt;
    +            &lt;string&gt;com.yixia.VPlayer&lt;/string&gt;
    +        &lt;/dict&gt;
    +    &lt;/array&gt;
            &lt;key&gt;CFBundleDevelopmentRegion&lt;/key&gt;
            &lt;string&gt;English&lt;/string&gt;
            &lt;key&gt;CFBundleDisplayName&lt;/key&gt;
</code></pre>

<p>```</p>

<h3>处理URL请求</h3>

<p>应用程序委托(UIApplicationDelegate)在 application:handleOpenURL: 方法中处理传
递给应用程序的URL请求</p>

<p>下面代码实现了这个委托方法:
```objc</p>

<pre><code>- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url
{
    if ([[url scheme] isEqualToString:@"VPlayer"]) {
        // get it!
        nslog(@"url: %@", url);
        return YES;
    }
    return NO;
}
</code></pre>

<p>```</p>

<h3>在其它程序中调用测试</h3>

<p>用 openURL: 方法调用</p>

<p>```objc</p>

<pre><code>- (IBAction)openAnotherApp:(id)sender
{
    NSString *video = @"VPlayer://http://v.youku.com/v_show/id_XNDk3ODAzMzEy.html";
    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:video]];
}
</code></pre>

<p>```</p>

<h3>其它常见的调用系统应用的方法</h3>

<p>```objc</p>

<pre><code>// app store
NSURL *appStoreUrl = [NSURL URLWithString:@"http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=291586600&amp;amp;mt=8"];
[[UIApplication sharedApplication] openURL:appStoreUrl];

// message
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"sms:55555"]];

// phone
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"tel://8004664411"]];

// mail
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"mailto://info@iphonedevelopertips.com"]];

// google map
NSString *searchQuery = @"the postion I want to know";
searchQuery = [searchQuery stringByAddingPercentEscapesUsingEncoding: NSUTF8StringEncoding];
NSString *urlString = [NSString stringWithFormat:@"http://maps.google.com/maps?q=%@", searchQuery];
[[UIApplication sharedApplication] openURL:[NSURL URLWithString: urlString]];

// browser
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://www.google.com/"]];
</code></pre>

<p>```</p>

<h3>公开你的 Scheme</h3>

<p>有一个网站提供了很多公开了的URL scheme, 你也可以将自己的程序的URL scheme提交上
去, 公开出来.</p>

<p><a href="http://www.handleopenurl.com/">URL scheme 网站地址</a><br/>
<a href="http://www.handleopenurl.com/developers">提交你的 url scheme 的地址</a></p>

<h3>Reference</h3>

<p><a href="http://blog.sina.com.cn/s/blog_6ae8b50d0100v4u3.html">IOS在当前程序中调用任意的第三方程序</a><br/>
<a href="http://blog.csdn.net/sql_help/article/details/7299553">iOS 如何在一个app中调用另一个app</a><br/>
<a href="http://www.handleopenurl.com/">Shared Interapp Communication!</a><br/>
<a href="https://developer.apple.com/library/ios/#documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html">Core Foundation Keys</a><br/>
<a href="http://wiki.akosma.com/IPhone_URL_Schemes">IPhone URL Schemes</a></p>

<h2>使 iOS 应用支持 "Open in ..." 特性</h2>

<p>"Open in ..."<a href="http://ios.biomsoft.com/2012/04/03/register-file-types-to-associate-file-extension-with-an-app/">特性</a>是指把某一文件用另外的应用来查看若处理, 比如, 邮件附件
, 当你点击它时, 就会出现一个"Open in ..."按钮, 点击, 其就会列出可以处理该类型
附件的应用, 然后你就可以选择任意一个打开该附件了.</p>

<p>文件类型处理是iphone os 3.2新增的, 与已经存在的自定义URL方案是不同的. 你能注册
你的应用程序来处理特定的文件类型并且任何应用程序 使用文档控制器能手动处理这些
文档在你的应用程序中.</p>

<h3>向系统注册</h3>

<p>为了使用"Open in ...", 你需要向系统注册, 告知系统你的应用能够处理的文件类型.
这通过配置文件 Info.plist 配置实现.</p>

<p>其中, 关键字 CFBundleIconFiles 用来设置你的应用的图标; CFBundleDocumentTypes
是最重要的节点, 在子节点 LSItemContentTypes 中列出应用所支持的文件类型, 这些文
件类型的名字用的是UTI(Uniform Type Identifiers)标准, 在<a href="http://developer.apple.com/library/ios/#documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html">这里</a>查看系统已定义
好的名字; 当然你也可定制一个<a href="http://developer.apple.com/library/ios/#documentation/FileManagement/Conceptual/understanding_utis/understand_utis_declare/understand_utis_declare.html">新的文件类型的UTI</a>.</p>

<p>```diff</p>

<pre><code>$ git diff VPlayer-Info.plist
    diff --git a/VPlayer-Info.plist b/VPlayer-Info.plist
    index b60a0b9..3afdfb8 100644
    --- a/VPlayer-Info.plist
    +++ b/VPlayer-Info.plist
    @@ -2,6 +2,36 @@
     &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
     &lt;plist version="1.0"&gt;
     &lt;dict&gt;
    +    &lt;key&gt;CFBundleIconFile&lt;/key&gt;
    +    &lt;string&gt;&lt;/string&gt;
    +    &lt;key&gt;CFBundleIconFiles&lt;/key&gt;
    +    &lt;array&gt;
    +        &lt;string&gt;Icon.png&lt;/string&gt;
    +        &lt;string&gt;Icon@2x.png&lt;/string&gt;
    +        &lt;string&gt;Icon-72.png&lt;/string&gt;
    +        &lt;string&gt;Icon-Small-50.png&lt;/string&gt;
    +        &lt;string&gt;Icon-Small.png&lt;/string&gt;
    +        &lt;string&gt;Icon-Small@2x.png&lt;/string&gt;
    +    &lt;/array&gt;
    +    &lt;key&gt;CFBundleDocumentTypes&lt;/key&gt;
    +    &lt;array&gt;
    +        &lt;dict&gt;
    +            &lt;key&gt;CFBundleTypeName&lt;/key&gt;
    +            &lt;string&gt;VPlayer support File&lt;/string&gt;
    +            &lt;key&gt;CFBundleTypeRole&lt;/key&gt;
    +            &lt;string&gt;Viewer&lt;/string&gt;
    +            &lt;key&gt;LSHandlerRank&lt;/key&gt;
    +            &lt;string&gt;Default&lt;/string&gt;
    +            &lt;key&gt;LSItemContentTypes&lt;/key&gt;
    +            &lt;array&gt;
    +                &lt;string&gt;public.audiovisual-content&lt;/string&gt;
    +                &lt;string&gt;public.url&lt;/string&gt;
    +                &lt;string&gt;public.file-url&lt;/string&gt;
    +                &lt;string&gt;public.url-name&lt;/string&gt;
    +                &lt;string&gt;public.image&lt;/string&gt;
    +            &lt;/array&gt;
    +        &lt;/dict&gt;
    +    &lt;/array&gt;
         &lt;key&gt;CFBundleGetInfoString&lt;/key&gt;
         &lt;string&gt;&lt;/string&gt;
</code></pre>

<p>```</p>

<p>在这里, 我把我的应用配置成可以处理音视频, 图象, URL.</p>

<h3>处理URL请求</h3>

<p>当应用被"Open in ..."调用打开时, 会收到系统发送的URL, 该URL指向要被处理的文件
或文件的复本, 所以在程序里, 也必须作相应的处理. 很幸运, 这
与<strong><em>在某一程序里调用打开其它程序--处理URL请求</em></strong>是一样的. 参见文章的前面部分.
因为两者是一样处理流程, 所以有一点要注意, 可以用下面的方法把两者区分开:</p>

<p>```objc</p>

<pre><code>- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url
{
    if([url isFileURL]) {
        // Handle file being passed in ("Open in ...")
    } else {
        // Handle custom URL scheme
    }
}
</code></pre>

<p>```</p>

<h3>Reference</h3>

<p><a href="https://developer.apple.com/library/ios/#documentation/FileManagement/Conceptual/DocumentInteraction_TopicsForIOS/Articles/RegisteringtheFileTypesYourAppSupports.html">Registering the File Types Your App Supports</a><br/>
<a href="http://developer.apple.com/library/ios/#documentation/FileManagement/Conceptual/DocumentInteraction_TopicsForIOS/Articles/PreviewingandOpeningItems.html">Previewing and Opening Files</a><br/>
<a href="http://developer.apple.com/library/ios/#documentation/FileManagement/Conceptual/understanding_utis/understand_utis_declare/understand_utis_declare.html">Declaring New Uniform Type Identifiers</a><br/>
<a href="http://developer.apple.com/library/ios/#documentation/FileManagement/Conceptual/understanding_utis/understand_utis.tasks/understand_utis_tasks.html">Adopting Uniform Type Identifiers</a><br/>
<a href="http://developer.apple.com/library/ios/#documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html">System-Declared Uniform Type Identifiers</a><br/>
<a href="http://ios.biomsoft.com/2012/04/03/register-file-types-to-associate-file-extension-with-an-app/">Register File Types to Associate File Extension with an App</a><br/>
<a href="http://ipadinsight.com/ios/is-the-open-in-feature-in-ios-limited-to-10-apps/">Is the 'Open In' Feature in iOS Limited to 10 Apps?</a><br/>
<a href="http://blog.csdn.net/zaitianaoxiang/article/details/6658492">UTI iPhone支持依文件后缀名打开应用</a></p>

<p>ff</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Jailbreak & Install Cracked Apps]]></title>
    <link href="http://nuoerlz.github.com/blog/2013/01/15/jailbroken-relate/"/>
    <updated>2013-01-15T17:24:00+08:00</updated>
    <id>http://nuoerlz.github.com/blog/2013/01/15/jailbroken-relate</id>
    <content type="html"><![CDATA[<h2>jailbroken</h2>

<p><a href="http://apptrackr.cd/">apptrackr</a></p>

<h2>How to Get Installous From Cydia</h2>

<p><a href="http://appostasy.com/apps/?p=545">how to</a></p>

<p>Note: For this to work, you must have your iPhone/iPod/iPad jailbroken.
For a program to help you jailbreak your device, check out our BlackSnow
review.</p>

<!--more-->


<ol>
<li>Turn on your Apple iPhone and open up Cydia.</li>
<li>Open the 'Manage' tab and select 'Sources.'</li>
<li>On the top of your unlocked iPhone screen, select 'Edit' and then 'Add'</li>
<li>You will be prompted to enter in a URL. Type in the following URL:
http://cydia.hackulo.us</li>
<li>Wait a few minutes as the program begins to download. Once it says
'Complete,' hit 'Return to Cydia.'</li>
<li>Now, back on the Cydia screen, select Hackulo.us from the top menu, under
'Entered by User.'</li>
<li>Scroll down and select 'Installous.'</li>
<li>Press 'Install' at the top of your screen.</li>
<li>Congratulations! You've just successfully installed Installous on your
unlocked iPhone!</li>
</ol>


<p>see also:
<a href="http://jaxov.com/2012/03/install-cracked-apps-on-ios-5-1-using-installous/">How to Install Installous on iOS 5.1 to Get Cracked iPhone Apps?</a></p>

<h2>Install Cracked Apps</h2>

<h3>How To Install Cracked Apps WITHOUT Installous!</h3>

<ol>
<li>Go to http://www.appzone.eu and download an app.</li>
<li>When downloaded, copy the app.</li>
<li>In Finder, search for the map called; 'Add Automatically To iTunes'</li>
<li>Paste the app in that map, and open iTunes.</li>
<li>Sync your iDevice with iTunes and you're done!</li>
</ol>


<p><a href="http://www.youtube.com/watch?v=V-jGNjA5KjE">video tech</a></p>

<h3>How to install Cracked Apps on iPhone &amp; iPod Touch &amp; iPad WITHOUT WiFi or itunes</h3>

<p>As all cracked App Store apps have ".IPA" extension, so you must install first
'Installous' which can then be used to install the cracked IPA files. All you
need is a jailbroken iDevice. Since these are the jailbreaking tools that will
create a Root Folder on your iDevice.</p>

<ul>
<li>Download 'iPhone Explorer' for Mac and PC from:
http://www.macroplant.com/iphoneexplorer/. You can also use'DiskAid' for Mac
and PC from : http://www.digidna.net/products/diskaid/download</li>
<li>Connect your iDevice to your Computer via USB and launch iPhone Explorer.
Follow and Navigate exactly as shown in the video.</li>
<li>Now you need to download a Cracked App. Download it from
http://apptrackr.org/ You can also search on Google or http://4shared.com or
anywhere you like.  Its your choice. But it MUST be in ".ipa" extension.
Because this ".ipa" is the only extension that is recognized by our Apple
Devices.</li>
<li>Once you have the IPA file, launch DiskAid or iPhone Explorer. Go to
<strong>/var/mobile/Documents/Installous/Downloads</strong> and place IPA file in
'Downloads' directory exactly as shown in the video. Do not place it anywhere
else.</li>
<li>Open Installous on your iPhone or iPod Touch or iPad and go to its Download
section. You will find your cracked app. Tap on it and hit Install. Done.
Your Cracked app will now be installed successfully.</li>
</ul>


<p><a href="http://www.youtube.com/watch?v=ZBdWqf8a1xA&amp;feature=related">video tech</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS应用的越狱版本(deb)的制作,发布,安装,卸载过程]]></title>
    <link href="http://nuoerlz.github.com/blog/2012/09/07/prepare-upload-app-to-cydia/"/>
    <updated>2012-09-07T17:24:00+08:00</updated>
    <id>http://nuoerlz.github.com/blog/2012/09/07/prepare-upload-app-to-cydia</id>
    <content type="html"><![CDATA[<h2>检查 dpkg-deb 工具集是否可用</h2>

<pre><code>$ dpkg-deb --version
    Debian `/sw/bin/dpkg-deb' package archive backend version 1.10.21 (darwin-x86_64).
    This is free software; see the GNU General Public Licence version 2 or
    later for copying conditions. There is NO warranty.
    See dpkg-deb --licence for details.
</code></pre>

<p>输入命令后有类似上面的输出, 则 dpkg-deb 命令可用, 否则需要自己安装.</p>

<!--more-->


<h2>install dpkg-deb tools for Mac (Fink)</h2>

<p>制作deb文件需要有dpkg-deb命令, Ubuntu/Debian 系统自带此命令, 越狱过的 iPhone
OS 也有此命令, Mac OS X 下需安装Fink, Windows 下需安装 Cygwin.</p>

<p>Fink 的主页是 http://www.finkproject.org .</p>

<p>以下是在 Mac OS X 下的安装过程. 可以参考官网上的<a href="http://www.finkproject.org/download/">Quick Start</a>.</p>

<p>安装Fink可以使用 dmg 包或源码安装, 为了下载正确的的安装包, 先查看一下当前的系
统版本:</p>

<pre><code>$ system_profiler | grep "System Version"
      System Version: Mac OS X 10.7.4 (11E2617)
$ uname -a
    Darwin erlzmatoMacBook-Pro.local 11.4.2 Darwin Kernel Version 11.4.2: Wed May 30 20:13:51 PDT 2012;
    root:xnu-1699.31.2~1/RELEASE_X86_64 x86_64
</code></pre>

<p>我的系统版本为 10.7 , 没有对应的 dmg 安装包, 只能通过源码安装了.</p>

<p><a href="http://www.finkproject.org/download/srcdist.php">下载源码</a>:</p>

<pre><code>$ cd ~/Downloads/
$ wget http://downloads.sourceforge.net/fink/fink-0.34.4.tar.gz
</code></pre>

<p>安装 Fink:</p>

<pre><code>$ tar xvzf fink-0.34.4.tar.gz
$ cd fink-0.34.4
$ sudo ./bootstrap
</code></pre>

<h2>用 ipa 包 制作 deb 包</h2>

<h3>准备目录树和相关文件</h3>

<p>创建一个临时目录, 把一些必须文件复制进来, 如: xx.ipa ,</p>

<pre><code>$ mkdir work
$ cd work
$ cp ~/VPlayer*.ipa .
$ ls
    VPlayer-0.0.5.ipa
$
</code></pre>

<p>解压 ipa 包:</p>

<pre><code>$ unzip VPlayer-0.0.5.ipa
$ ls Payload/
 VPlayer.app
</code></pre>

<p>准备 deb 包目录树, 创建相关目录, 配置文件和脚本, 并把 *.app 复制到相应目录里,
最终的目录文件结构如下:</p>

<pre><code>$ ftree .
    ./VPlayer
          |---Applications
          |           |---VPlayer.app
          |---DEBIAN
          |     |---control
          |     |---preinst
          |     |---postinst
          |     |---prerm
          |     |---postrm
          |     |---extrainst_
</code></pre>

<h4>配置文件</h4>

<p>在 DEBIAN 目录下添加 control 文件, 各个关键字的详解见<a href="http://bbs.weiphone.com/read-htm-tid-669283.html">"DEBIAN之control"</a>.</p>

<pre><code>$ cat &gt; VPlayer/DEBIAN/control
    Package: com.yixia.VPlayer
    Version: 0.0.5
    Name: VPlayer Video Player
    Section: [Utilities]
    Architecture: iphoneos-arm
    Author: VPlayer&lt;VPlayer-ios@yixia.com&gt;
    Maintainer: VPlayer&lt;www.VPlayer.net&gt;
    Homepage: www.VPlayer.net
    Icon: file:///Applications/VPlayer.app/Icon.png
    Installed-Size: 9102
    Priority: Optional
    Essential: no
    Description: The best video player for iOS!
    tag: purpose:: uikit, role::enduser
</code></pre>

<h4>脚本</h4>

<p>标准的 deb 脚本有4个, preinst, postinst, prerm 和 postrm ; 在 Cydia 中还存在一
个独立的脚本, extrainst_ , 从字面上来讲就是额外的安装脚本.</p>

<pre><code>* preinst       在复制文件前执行的脚本
* postinst      在复制文件之后执行的脚本
* prerm         在卸载前执行的脚本
* postrm        在卸载之后执行的脚本
* extrainst_    这个脚本是为解决某些脚本只需要在安装时执行, 在升级时不执行
                而专门引入的一个脚本, 功能跟postinst差不多
</code></pre>

<h3>生成 deb 包</h3>

<p>开始打 deb 包, 即会生成 VPlayer.deb</p>

<pre><code>$ dpkg-deb -b VPlayer
</code></pre>

<p>使命名规范, 将会重命名为 com.yixia.VPlayer_0.0.5_iphoneos-arm.deb</p>

<pre><code>$ dpkg-name VPlayer.deb
</code></pre>

<p>至此, deb 包就制作完成了.</p>

<h2>发布 deb 包</h2>

<h3>发布到已有的仓库</h3>

<p>这容易, 只需要注册一个id, 上传deb包就可以了, 可以发布到一些有名的repo:</p>

<p><a href="http://thebigboss.org/hosting-repository-cydia/submission">BigBoss</a><br/>
<a href="http://modmyi.com/cydia/">modmyi</a><br/>
<a href="http://apt.weiphone.com/index.php?action=uploadSoftwareFile">威锋网</a><br/>
<a href="http://thebigboss.org/hosting-repository-cydia/submit-your-app">BigBoss-submit</a></p>

<h3>创建自己的仓库</h3>

<p>如果要创建自己的仓库, 推荐使用 <a href="https://www.myrepospace.com/">MyRepoSpace.com</a> , 只要注册就可以拥有一个
独立的repo, 并且可以免费使用, 但仓库大小有限制, 只有50M.</p>

<h2>deb 包的安装和卸载</h2>

<h3>安装过程</h3>

<ul>
<li>读取数据库并锁定, 避免同时有两个安装程序在运行</li>
<li>读取 control 中的 Package(软件包标识)和版本信息, 并搜索数据库, 若已存在, 则
卸载之后再安装;</li>
<li>检查 Depends, Pre-Depends, Conflicts 和 Replaces, 如果检测到已存在 Conflicts
中存在的软件, 则报错并终止安装. 如未找到 Pre-Depends 指定的软件, 则报错并终
止安装. 如找到 Replaces 中指定的软件, 则卸载之;</li>
<li>将数据写入 /var/lib/dpkg/status 文件中;</li>
<li>执行 preinst 脚本(如果有);</li>
<li>解包 data.tar.gz, 将文件放置于相应位置, 并将文件列表写入
/var/lib/dpkg/info/XXX.list;</li>
<li>运行 postinst 和 extrainst_ 脚本(如果有);</li>
<li>如果之前的安装都没有出错, 即安装成功, 那么会在 status 文件中写入 Status:
install ok installed 信息, 否则会写入其它状态数据, 比如 Unpacked (未解包数据
),Failed-config(脚本未能成功执行),Half-installed(安装失败等);</li>
<li>重新加载数据库并解除锁定.</li>
</ul>


<h3>安装方法</h3>

<ul>
<li>Cydia 或同类 APT 管理软件在线安装, 这个是最佳的安装方式, 因为通常无需考虑依
赖关系, 但缺点是对网络的要求比较高;</li>
<li>命令行中以 dpkg -i XXX.deb 的形式安装, 好处是可以以通配符一次性安装多个 deb,
而且也可以直接看到脚本的运行状况和安装成功/失败的提示信息, 缺点是需要命令行
软件的支持, 如 Putty/WinSCP的控制台/iSSH/MobileTerminal, 很多人也不熟悉命令
行下的操作. 另外, 安装完后会不显示图标;</li>
<li>放置于 AutoInstall 目录重启安装. 该方法实际是 Cydia 提供的一个启动脚本, 在每
次系统启动时以 dpkg 命令安装 /va/root/Media/Cydia/AutoInstall 目录下的 deb,
好处是不需要命令行操作, 缺点是必须要重启, 有些甚至要重启两次, 也会出现不显示
图标的情况;</li>
<li>利用 iFile 安装, 复制 deb 包到任意目录, 然后在 iFile 中点击选择安装. 好处是
图形化操作, 桌面会显示图标(需要等几分钟才出现), 缺点是不能一次安装多个deb;</li>
<li>用 Cyder II 等软件来安装, 其原理是模拟一个 APT 软件管理器来下载相应的 deb 文
件并传到设备, 然后以前面几种方式来安装.</li>
</ul>


<p>总体来说, deb 的安装都是依赖于 dpkg -i 命令来安装, 只不过有些是在命令行下输入
命令, 有些是提供了图形界面. 但除了 Cydia 安装一种方式之外, 其余几种安装方式都
存在一些共有的问题:</p>

<ul>
<li>不会自行搜索依赖关系, 必须手动提供所依赖的 deb;</li>
<li>Cydia 会读取安装脚本里的一些特殊语句, 比如, 仅在全新安装时执行而不在升级时执
行, 安装完成后重启 SpringBoard 或设备等等.</li>
</ul>


<h3>卸载过程</h3>

<ul>
<li>读取数据库并锁定;</li>
<li>根据软件标识搜寻数据库;</li>
<li>检查是否有软件依赖于待卸载的软件, 如果有则提示, 并中断卸载;</li>
<li>执行 prerm 脚本(如果有);</li>
<li>读取 /var/lib/dpkg/info/XXX.list 文件, 并删除 list 文件中记录的全部文件和非
空文件夹;</li>
<li>运行 postrm 脚本;</li>
<li>如果卸载命令是 dpkg -r, 则保留 status 中的记录并改为 Status: Not installed;
如果卸载命令是 dpkg -P, 则删除全部数据;</li>
<li>如果卸载过程没有错误的话, 重新读取数据库并解除锁定.</li>
</ul>


<p>由于 deb 安装的软件可能会在运行时在 /var/mobile/Documents 下放置存档文件, 或在
/var/mobile/Library/Preferences 下放置设置文件, 而这些文件并没有记录在 list 文
件里, 所以卸载的时候不会被删除. 所以, 安装的程序所产生的文件需要在 prerm 或
postrm 脚本中删除.</p>

<h3>卸载方法</h3>

<ul>
<li>Cydia 里卸载, 优点是卸载过程和提示信息很详细, 全图形界面操作, 同时也提供了重
新安装的选项;</li>
<li>以 dpkg -r Package_ID 命令或 dpkg -P Package_ID 命令来卸载;</li>
<li>Cydelete 来卸载, 优点是可以直接在桌面上卸载有图标的软件, 但对那些没有图标的
无能为力.</li>
</ul>


<h2>Reference</h2>

<p><a href="http://www.sinfuliphone.com/showthread.php?p=870066">cydia app upload?</a><br/>
<a href="http://insanelyi.com/topic/5765-convert-ipa-file-into-deb-file/">Convert ipa file into deb file</a><br/>
<a href="http://bbs.weiphone.com/read-htm-tid-669283.html">从零开始搭建Cydia软件源+制作deb安装包</a><br/>
<a href="http://fanlb.blogbus.com/logs/80466716.html">Iphone/ipad安装包的三种格式 deb,ipa 和 pxl 解释</a></p>
]]></content>
  </entry>
  
</feed>
